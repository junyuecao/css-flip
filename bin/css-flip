#!/usr/bin/env node

/* Copyright 2014 Twitter, Inc. and other contributors; Licensed MIT */

var fs = require('fs');
var path  = require('path');
var program = require('commander');
var flip = require('..');

program
  .usage('[options] <file ...>\n\n  css-flip is a CSS BiDi flipper.')
  .version(require('../package.json').version)
  .option('-c, --compress', 'compress whitespace')
  .option('-o, --output <file>', 'specify an output file')

  .option('-r, --reverse', '从rtl转为ltr.')
  .option('-f, --suffix', '添加后缀:转为xxx-rtl.css')
  
  .option('-, --stdin', 'read from stdin')
  .parse(process.argv);

var options = {
 compress: program.compress
};
if (program.stdin) {
  flipStdin(options, done);
}
else if (program.args.length) {
  flipFiles(program.args, options, done);
}
else {
//  program.help();
  flipLtrFolder( options,done);
}


// -- Functions --

// Writes the given CSS to disk or stdout.
function done(css,filename) {
  if (program.output) {
    return fs.writeFileSync(program.output, css);
  }
    if(filename){
        console.log(filename);
        fs.writeFileSync(filename,css);
    }else {
        process.stdout.write(css);
    }
}

// Flips each file and passes the concatenated result to the callback.
function flipFiles(files, options, cb, filename) {
  var css = files.reduce(function (acc, file) {
    if (!fs.existsSync(file)) {
      return acc;
    }

    return acc.concat(flip(fs.readFileSync(file, 'utf8'), options));
  }, []);

  cb(css.join('\n'),filename);
}

// Collects stdin and passes the flipped result to the callback.
function flipStdin(options, cb) {
  var css = [];
  var stdin = process.stdin;

  stdin.on('data', function (chunk) {
    css.push(chunk);
  });

  stdin.on('end', function () {
    cb(flip(css.join(''), options));
  });

  stdin.setEncoding('utf8');
  stdin.resume();
}

function flipLtrFolder(options, cb){
    var files;
    var dir = path.join('./' , 'ltr');
    var rtlDir = path.join('./', 'rtl');
    if(program.reverse){
        var tmp = rtlDir;
        rtlDir = dir;
        dir = tmp;
    }

    try{
        if(fs.lstatSync(dir).isDirectory()){
            files = fs.readdirSync(dir);
            files.forEach(function(f,i){
                var targetFile;
                if(!program.reverse){
                    targetFile = f.replace(/\.css$/i,'-rtl.css');
                }else{
                    targetFile = f.replace(/-rtl.css$/i,'.css');
                }

                var file = [path.join(dir,f)];
                targetFile = path.join(rtlDir, targetFile);

                flipFiles(file, options, cb, targetFile);
            });
        }
    }catch (e){
        console.log('没有rtl文件夹');
        return;
    }
}